{"version":3,"sources":["webpack:///./shell/pages/index.vue","webpack:///shell/pages/index.vue","webpack:///./shell/pages/index.vue?8c31"],"names":["render","staticRenderFns","middleware","redirect","store","app","route","name","component"],"mappings":"wHAAIA,EAAQC,E,wBCIZ,0BACA,mIAGe,GACfC,WADA,YAGA,MADAC,EACA,EADAA,SAAAC,EACA,EADAA,MAAAC,EACA,EADAA,IAEA,GADA,EADAC,MAEA,6CACA,oBACA,+BACA,GAAAC,aAGA,yBACA,YAGA,yCACA,sBAIA,qFACA,KAIA,cAEA,KAGA,0DACA,qBAGA,OCzC2U,I,YFOvUC,EAAY,eACd,EACAR,EACAC,GACA,EACA,KACA,KACA,MAIa,aAAAO,E","file":"js/pages/index.8a17fb64.js","sourcesContent":["var render, staticRenderFns\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\nimport { SEEN_WHATS_NEW } from '@shell/store/prefs';\nimport { getVersionInfo } from '@shell/utils/version';\n\nconst validRoute = (route, router) => {\n  return !!route && !!router.resolve(route)?.resolved?.matched?.length;\n};\n\nexport default {\n  middleware({\n    redirect, store, app, route\n  } ) {\n    const seenWhatsNew = store.getters['prefs/get'](SEEN_WHATS_NEW);\n    const versionInfo = getVersionInfo(store);\n    const isSingleProduct = store.getters['isSingleProduct'];\n    const dashboardHome = { name: 'home' };\n\n    // If this is a new version, then take the user to the home page to view the release notes\n    if (versionInfo.fullVersion !== seenWhatsNew && !isSingleProduct) {\n      return redirect(dashboardHome);\n    }\n\n    const afterLoginRouteObject = store.getters['prefs/afterLoginRoute'];\n    const targetRoute = app.router.resolve(afterLoginRouteObject);\n\n    // If target route is /, then we will loop with endless redirect - so detect that here and\n    // redirect to /home, which is what we would do below, if there was no `afterLoginRouteObject`\n    if (targetRoute?.route?.fullPath === '/') {\n      return redirect(dashboardHome);\n    }\n\n    // Confirm this is a valid route (it could have come from an uninstalled plugin)\n    if (validRoute(afterLoginRouteObject, app.router)) {\n      // Take the user to the configured login route\n      return redirect(afterLoginRouteObject);\n    }\n\n    if (validRoute(isSingleProduct?.afterLoginRoute, app.router)) {\n      return redirect(isSingleProduct.afterLoginRoute);\n    }\n\n    return redirect(dashboardHome);\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--16-0!../../node_modules/babel-loader/lib/index.js??ref--16-1!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--16-0!../../node_modules/babel-loader/lib/index.js??ref--16-1!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\""],"sourceRoot":""}